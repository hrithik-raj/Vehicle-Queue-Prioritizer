#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define Size 60

struct BLV {
    char n[11];
} B[10];

struct Vehicle_Stack {
    struct Vehicle *vehicle[Size];
    int top;
};

struct Vehicle {
    char name[20], numberplate[10];
    int priority;
    char owner[20];
};

struct VehicleQueue {
    struct Vehicle *vehicle[Size];
    int front, rear;
};

struct VehicleQueue *queue;

struct TollGate {
    struct Vehicle_Stack *vehicleStack;
    int GateNumber;
    char GateType[15];
    bool status;
    struct TollGate *prev;
    struct TollGate *next;
};

struct TollGate *root;

char BlackList[10][10];

void QueueInitializer() {
    free(queue);
    queue = (struct VehicleQueue *) malloc(sizeof(struct VehicleQueue));
    queue->front = queue->rear = -1;
}

void push(struct Vehicle_Stack *s, struct Vehicle *v) {
    if (s->top <= Size) {
        s->top++;
        s->vehicle[s->top] = v;
    }
}

void EnQueue(struct VehicleQueue *q, struct Vehicle *v) {
    if (q->front == -1) {
        q->front = 0;
    }
    q->vehicle[++q->rear] = v;
}

void displayVehicleNumbers(struct Vehicle_Stack *stack) {
    struct Vehicle_Stack *tmp = stack;
    int i, count = 0;
    for (i = stack->top; i >= 0; i--) {
        count++;
    }
    printf("\n%d Vehicles Passed\n\n\n\n", count);
}

void LetVehiclesPass() {
    int i, j, c = 0;
    struct TollGate *t = root;
    struct Vehicle_Stack *tmp;
    for (i = queue->front; i <= queue->rear; i++) {
        c = 0;
        for (j = 0; j < 10; j++) {
            if (strcasecmp(B[j].n, queue->vehicle[i]->numberplate) == 0) {
                printf(" %s is Black Listed Vehicle\n\n\n", B[j].n);
                c = 1;
            }
        }
        if (c == 1) {
            continue;
        }
        if (queue->vehicle[i]->priority == 5) {
            if (t->GateNumber == 1) {

            } else {
                t = root;
            }
            push(t->vehicleStack, queue->vehicle[i]);
        } else if (queue->vehicle[i]->priority == 4) {
            t = root;
            t = t->prev;

            push(t->vehicleStack, queue->vehicle[i]);
        } else if (queue->vehicle[i]->priority == 3) {
            if (t->GateNumber == 5) {

            } else {
                if (t->GateNumber < 5) {
                    while (t->GateNumber != 5) {
                        t = t->next;
                    }
                } else {
                    while (t->GateNumber != 5) {
                        t = t->prev;
                    }
                }
            }

            push(t->vehicleStack, queue->vehicle[i]);
        } else if (queue->vehicle[i]->priority == 2) {
            if (strcasecmp(queue->vehicle[i]->name, "Car") == 0) {
                if (t->GateNumber == 2) {

                } else {
                    if (t->GateNumber < 2) {
                        while (t->GateNumber != 2) {
                            t = t->next;
                        }
                    } else {
                        while (t->GateNumber != 2) {
                            t = t->prev;
                        }
                    }
                }
            } else {
                if (t->GateNumber == 3) {

                } else {
                    if (t->GateNumber < 3) {
                        while (t->GateNumber != 3) {
                            t = t->next;
                        }
                    } else {
                        while (t->GateNumber != 3) {
                            t = t->prev;
                        }
                    }
                }
            }

            push(t->vehicleStack, queue->vehicle[i]);
        } else if (queue->vehicle[i]->priority == 1) {
            if (t->GateNumber == 4) {

            } else {
                if (t->GateNumber < 4) {
                    while (t->GateNumber != 4) {
                        t = t->next;
                    }
                } else {
                    while (t->GateNumber != 4) {
                        t = t->prev;
                    }
                }
            }
            push(t->vehicleStack, queue->vehicle[i]);
        }
        queue->front++;
    }
    QueueInitializer();
}

void DisplayVehicles(struct VehicleQueue *q) {

    for (int i = q->front; i <= q->rear; i = i + 1) {
        printf(" %s ", q->vehicle[i]->name);
    }
}

void printStack(struct Vehicle_Stack *stack) {
    int i;
    printf("     Type         Name       Number Plate\n");
    for (i = stack->top; i >= 0; i--) {
        printf("%10s%15s%15s\n", stack->vehicle[i]->name, stack->vehicle[i]->owner,
               stack->vehicle[i]->numberplate);
    }
}

void Menu_for_print_Stack() {
    int ch = 0;
    do {
        struct TollGate *toll = root;
        printf("Which Stack do you want to print:");
        printf("\n1.Emergency\t2.Cars\t3.Jeeps\t4.Heavy Load\t5.Two Wheeler\t6.Light Load\n7.Exit");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printStack(toll->vehicleStack);
                break;
            case 2:
                printStack(toll->next->vehicleStack);
                break;
            case 3:
                printStack(toll->next->next->vehicleStack);
                break;
            case 4:
                printStack(toll->next->next->next->vehicleStack);
                break;
            case 5:
                printStack(toll->prev->prev->vehicleStack);
                break;
            case 6:
                printStack(toll->prev->vehicleStack);
                break;
            case 7:
                return;
            default:;
        }
    } while (ch != 7);
}

void Menu_for_print_Count() {
    int ch = 0;
    do {
        struct TollGate *toll = root;
        printf("Which count do you want to print:");
        printf("\n1.Emergency\t2.Cars\t3.Jeeps\t4.Heavy Load\t5.Two Wheeler\t6.Light Load\n7.Exit");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                displayVehicleNumbers(toll->vehicleStack);
                break;
            case 2:
                displayVehicleNumbers(toll->next->vehicleStack);
                break;
            case 3:
                displayVehicleNumbers(toll->next->next->vehicleStack);
                break;
            case 4:
                displayVehicleNumbers(toll->next->next->next->vehicleStack);
                break;
            case 5:
                displayVehicleNumbers(toll->prev->prev->vehicleStack);
                break;
            case 6:
                displayVehicleNumbers(toll->prev->vehicleStack);
                break;
            case 7:
                return;
            default:;
        }
    } while (ch != 7);
}

int priority_assigner(char *name) {
    if (strcasecmp(name, "Car") == 0 || strcasecmp(name, "Jeep") == 0) {
        return 2;
    } else if (strcasecmp(name, "Emergency") == 0) {
        return 5;
    } else if (strcasecmp(name, "Heavy_Load") == 0) {
        return 1;
    } else if (strcasecmp(name, "Two_Wheeler") == 0) {
        return 3;
    } else if (strcasecmp(name, "Light_Load") == 0) {
        return 4;
    } else {
        return 0;
    }
}

void vehicleQueueCreator() {
    int ch, flag = 0;
    struct TollGate *tmp1;
    struct Vehicle_Stack *tmp;
    printf("\n\n\n");
    do {
        tmp1 = root;
        struct Vehicle *newVehicle = (struct Vehicle *) malloc(sizeof(struct Vehicle));
        printf("\nEnter the vehicle owners name:");
        scanf("%s", newVehicle->owner);
        printf("\nEnter the vehicle type:");
        scanf("%s", newVehicle->name);
        newVehicle->priority = priority_assigner(newVehicle->name);
        printf("\nEnter the Registration number of the vehicle:");
        scanf("%s", newVehicle->numberplate);
        switch (newVehicle->priority) {
            case 1:
                while (tmp1->GateNumber != 4) {
                    tmp1 = tmp1->next;
                }
                tmp = tmp1->vehicleStack;
                for (int i = tmp->top; i >= 0; i--) {
                    if (strcasecmp(tmp->vehicle[i]->numberplate, newVehicle->numberplate) == 0) {
                        system("cls");
                        printf("\n\nVehicle has already  passed. I looks like you are using a fake registration number please enter it again: \n\n");
                        scanf("%s", newVehicle->numberplate);
                    }
                }
                break;
            case 2:
                while (tmp1->GateNumber != 2) {
                    tmp1 = tmp1->next;
                }
                tmp = tmp1->vehicleStack;
                for (int i = tmp->top; i >= 0; i--) {
                    if (strcasecmp(tmp->vehicle[i]->numberplate, newVehicle->numberplate) == 0) {
                        system("cls");
                        printf("\n\nVehicle has already  passed. It looks like you are using a fake registration number please enter it again: \n\n");
                        scanf("%s", newVehicle->numberplate);
                        flag = 1;
                    }
                }

                if (flag == 1) {

                } else {
                    while (tmp1->GateNumber != 3) {
                        tmp1 = tmp1->next;
                    }
                    tmp = tmp1->vehicleStack;
                    for (int i = tmp->top; i >= 0; i--) {
                        if (strcasecmp(tmp->vehicle[i]->numberplate, newVehicle->numberplate) == 0) {
                            system("cls");
                            printf("\n\nVehicle has already  passed. I looks like you are using a fake registration number please enter it again: \n\n");
                            scanf("%s", newVehicle->numberplate);
                        }
                    }
                }

                break;
            case 3:
                while (tmp1->GateNumber != 5) {
                    tmp1 = tmp1->next;
                }
                tmp = tmp1->vehicleStack;
                for (int i = tmp->top; i >= 0; i--) {
                    if (strcasecmp(tmp->vehicle[i]->numberplate, newVehicle->numberplate) == 0) {
                        system("cls");
                        printf("\n\nVehicle has already  passed. I looks like you are using a fake registration number please enter it again: \n\n");
                        scanf("%s", newVehicle->numberplate);
                    }
                }
                break;
            case 4:
                while (tmp1->GateNumber != 6) {
                    tmp1 = tmp1->next;
                }
                tmp = tmp1->vehicleStack;
                for (int i = tmp->top; i >= 0; i--) {
                    if (strcasecmp(tmp->vehicle[i]->numberplate, newVehicle->numberplate) == 0) {
                        system("cls");
                        printf("\n\nVehicle has already  passed. I looks like you are using a fake registration number please enter it again: \n\n");
                        scanf("%s", newVehicle->numberplate);
                    }
                }
                break;
            case 5:
                while (tmp1->GateNumber != 1) {
                    tmp1 = tmp1->next;
                }
                tmp = tmp1->vehicleStack;
                for (int i = tmp->top; i >= 0; i--) {
                    if (strcasecmp(tmp->vehicle[i]->numberplate, newVehicle->numberplate) == 0) {
                        system("cls");
                        printf("\n\nVehicle has already  passed. I looks like you are using a fake registration number please enter it again: \n\n");
                        scanf("%s", newVehicle->numberplate);
                    }
                }
                break;
        }
        EnQueue(queue, newVehicle);
        printf("Do you want to add another vehicle(1/0):");
        scanf("%d", &ch);
    } while (ch == 1);

}

void CreateGate() {
    struct TollGate *new, *p = root;
    int n = 6, i;
    for (i = 1; i <= n; i++) {
        new = (struct TollGate *) malloc(sizeof(struct TollGate));
        new->prev = NULL;
        new->next = NULL;
        switch (i) {
            case 1:
                strcpy(new->GateType, "Emergency");
                new->GateNumber = 1;
                new->status = true;
                new->vehicleStack = (struct Vehicle_Stack *) malloc(sizeof(struct Vehicle_Stack));
                new->vehicleStack->top = -1;
                break;
            case 2:
                strcpy(new->GateType, "Car");
                new->GateNumber = 2;
                new->status = true;
                new->vehicleStack = (struct Vehicle_Stack *) malloc(sizeof(struct Vehicle_Stack));
                new->vehicleStack->top = -1;
                break;
            case 3:
                strcpy(new->GateType, "Jeep");
                new->GateNumber = 3;
                new->status = true;
                new->vehicleStack = (struct Vehicle_Stack *) malloc(sizeof(struct Vehicle_Stack));
                new->vehicleStack->top = -1;
                break;
            case 4:
                strcpy(new->GateType, "Heavy Load");
                new->GateNumber = 4;
                new->status = true;
                new->vehicleStack = (struct Vehicle_Stack *) malloc(sizeof(struct Vehicle_Stack));
                break;
            case 5:
                strcpy(new->GateType, "Two Wheeler");
                new->GateNumber = 5;
                new->status = true;
                new->vehicleStack = (struct Vehicle_Stack *) malloc(sizeof(struct Vehicle_Stack));
                new->vehicleStack->top = -1;
                break;
            case 6:
                strcpy(new->GateType, "Light Load");
                new->GateNumber = 6;
                new->status = true;
                new->vehicleStack = (struct Vehicle_Stack *) malloc(sizeof(struct Vehicle_Stack));
                new->vehicleStack->top = -1;
                break;
            default:;
        }
        if (root == NULL) {
            root = new;
            root->next = root;
            root->prev = root;
            p = root;
        } else {
            while (p->next != root) {
                p = p->next;
            }
            root->prev = new;
            p->next = new;
            new->prev = p;
            new->next = root;
        }
    }
}

void DisplayLanes(struct TollGate *r) {
    for (r = root; r->next != root; r = r->next) {
        printf(" %d.%s  ", r->GateNumber, r->GateType);
    }
    printf(" %d.%s  ", r->GateNumber, r->GateType);
}

int main() {
    int ch;
    CreateGate();
    QueueInitializer();
    strcpy(B[0].n, "KA02MM1234");
    strcpy(B[1].n, "KA01MM1235");
    strcpy(B[2].n, "KA01MM0001");
    strcpy(B[3].n, "KA02MM1111");
    strcpy(B[4].n, "KA01MM2222");
    strcpy(B[5].n, "KA01MM3333");
    strcpy(B[6].n, "KA01MM5555");
    strcpy(B[7].n, "KA01MM1221");
    strcpy(B[8].n, "KA01MM8888");
    strcpy(B[9].n, "KA01MM1234");
    do {
        printf("The Gates are Ready.\nEnter your choice:\n1.Add Vehicles to queue\n2.Let the vehicles pass\n3.Take a look at the vehicles that passed\n4.Vehicle count\n5.Exit\n---");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                vehicleQueueCreator();
                system("cls");
                break;
            case 2:
                LetVehiclesPass();
                break;
            case 3:
                Menu_for_print_Stack();
                break;
            case 4:
                Menu_for_print_Count();
                break;
            case 5:
                exit(0);
            default:;
        }
    } while (ch != 5);

    return 0;
}